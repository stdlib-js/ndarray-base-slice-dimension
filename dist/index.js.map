{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar args2multislice = require( '@stdlib/slice-base-args2multislice' );\nvar ndims = require( '@stdlib/ndarray-base-ndims' );\nvar slice = require( '@stdlib/ndarray-base-slice' );\nvar normalizeIndex = require( '@stdlib/ndarray-base-normalize-index' );\nvar nulls = require( '@stdlib/array-base-nulls' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Returns a view of an input ndarray when sliced along a specified dimension.\n*\n* @param {ndarray} x - input array\n* @param {integer} dim - index of dimension to slice\n* @param {(Slice|integer)} s - slice object or an integer\n* @param {boolean} strict - boolean indicating whether to enforce strict bounds checking\n* @param {boolean} writable - boolean indicating whether a returned array should be writable\n* @throws {TypeError} first argument must be an ndarray having one or more dimensions\n* @throws {RangeError} dimension index exceeds the number of dimensions\n* @throws {RangeError} slice exceeds array bounds\n* @returns {ndarray} ndarray view\n*\n* @example\n* var Slice = require( '@stdlib/slice-ctor' );\n* var ndarray = require( '@stdlib/ndarray-ctor' );\n* var ndarray2array = require( '@stdlib/ndarray-to-array' );\n*\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n* // returns <ndarray>\n*\n* var sh = x.shape;\n* // returns [ 3, 2 ]\n*\n* var arr = ndarray2array( x );\n* // returns [ [ 1.0, 2.0 ], [ 3.0, 4.0 ], [ 5.0, 6.0 ] ]\n*\n* var s = new Slice( null, null, -1 );\n* // returns <Slice>\n*\n* var y = sliceDimension( x, 0, s, false, false );\n* // returns <ndarray>\n*\n* sh = y.shape;\n* // returns [ 3, 2 ]\n*\n* arr = ndarray2array( y );\n* // returns [ [ 5.0, 6.0 ], [ 3.0, 4.0 ], [ 1.0, 2.0 ] ]\n*/\nfunction sliceDimension( x, dim, s, strict, writable ) {\n\tvar args;\n\tvar N;\n\tvar d;\n\n\t// Retrieve array meta data:\n\tN = ndims( x );\n\n\t// Check whether we were provided a zero-dimensional array...\n\tif ( N === 0 ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray having one or more dimensions. Number of dimensions: %d.', N ) );\n\t}\n\t// Normalize the dimension index:\n\td = normalizeIndex( dim, N-1 );\n\tif ( d === -1 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Dimension index exceeds the number of dimensions. Number of dimensions: %d. Value: `%d`.', N, dim ) );\n\t}\n\t// Define a list of MultiSlice constructor arguments:\n\targs = nulls( N );\n\targs[ d ] = s;\n\n\t// Return a new array view:\n\treturn slice( x, args2multislice( args ), strict, writable );\n}\n\n\n// EXPORTS //\n\nmodule.exports = sliceDimension;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return a view of an input ndarray when sliced along a specified dimension.\n*\n* @module @stdlib/ndarray-base-slice-dimension\n*\n* @example\n* var Slice = require( '@stdlib/slice-ctor' );\n* var ndarray = require( '@stdlib/ndarray-ctor' );\n* var ndarray2array = require( '@stdlib/ndarray-to-array' );\n* var sliceDimension = require( '@stdlib/ndarray-base-slice-dimension' );\n*\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n* // returns <ndarray>\n*\n* var sh = x.shape;\n* // returns [ 3, 2 ]\n*\n* var arr = ndarray2array( x );\n* // returns [ [ 1.0, 2.0 ], [ 3.0, 4.0 ], [ 5.0, 6.0 ] ]\n*\n* var s = new Slice( null, null, -1 );\n* // returns <Slice>\n*\n* var y = sliceDimension( x, 0, s, false, false );\n* // returns <ndarray>\n*\n* sh = y.shape;\n* // returns [ 3, 2 ]\n*\n* arr = ndarray2array( y );\n* // returns [ [ 5.0, 6.0 ], [ 3.0, 4.0 ], [ 1.0, 2.0 ] ]\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAkB,QAAS,oCAAqC,EAChEC,EAAQ,QAAS,4BAA6B,EAC9CC,EAAQ,QAAS,4BAA6B,EAC9CC,EAAiB,QAAS,sCAAuC,EACjEC,EAAQ,QAAS,0BAA2B,EAC5CC,EAAS,QAAS,uBAAwB,EAiD9C,SAASC,EAAgBC,EAAGC,EAAKC,EAAGC,EAAQC,EAAW,CACtD,IAAIC,EACAC,EACAC,EAMJ,GAHAD,EAAIZ,EAAOM,CAAE,EAGRM,IAAM,EACV,MAAM,IAAI,UAAWR,EAAQ,+GAAgHQ,CAAE,CAAE,EAIlJ,GADAC,EAAIX,EAAgBK,EAAKK,EAAE,CAAE,EACxBC,IAAM,GACV,MAAM,IAAI,WAAYT,EAAQ,6GAA8GQ,EAAGL,CAAI,CAAE,EAGtJ,OAAAI,EAAOR,EAAOS,CAAE,EAChBD,EAAME,CAAE,EAAIL,EAGLP,EAAOK,EAAGP,EAAiBY,CAAK,EAAGF,EAAQC,CAAS,CAC5D,CAKAZ,EAAO,QAAUO,IC5CjB,IAAIS,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "args2multislice", "ndims", "slice", "normalizeIndex", "nulls", "format", "sliceDimension", "x", "dim", "s", "strict", "writable", "args", "N", "d", "main"]
}
